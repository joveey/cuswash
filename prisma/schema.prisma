// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMIN
}

enum BookingStatus {
  PENDING // Menunggu pembayaran
  PAID // Pembayaran berhasil, menunggu konfirmasi admin
  CONFIRMED // Pesanan dikonfirmasi oleh admin
  CANCELLED // Dibatalkan
  COMPLETED // Selesai
}

// Model baru untuk jam operasional
model OperatingHour {
  id        Int      @id @default(autoincrement())
  dayOfWeek Int      // 0=Minggu, 1=Senin, ..., 6=Sabtu
  openTime  String   // e.g., "08:00"
  closeTime String   // e.g., "17:00"
  isActive  Boolean  @default(true)
}

// Model baru untuk slot waktu
model TimeSlot {
  id           String    @id @default(cuid())
  time         String    // e.g., "08:00", "09:00"
  capacity     Int       @default(2) // Berapa mobil yang bisa dilayani di slot ini
  bookings     Booking[]
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CarType {
  id       String    @id @default(cuid())
  name     String    // e.g., Small SUV, Sedan, MPV
  price    Float
  bookings Booking[]
}

model Booking {
  id              String        @id @default(cuid())
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  carType         CarType       @relation(fields: [carTypeId], references: [id])
  carTypeId       String
  
  // Perubahan: Menggunakan relasi ke TimeSlot
  bookingDate     DateTime      // Tanggal pesanan
  timeSlot        TimeSlot      @relation(fields: [timeSlotId], references: [id])
  timeSlotId      String
  
  status          BookingStatus @default(PENDING)
  totalPrice      Float
  
  midtransOrderId String?       @unique
  midtransToken   String?       @db.Text
  paymentStatus   String?       

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

